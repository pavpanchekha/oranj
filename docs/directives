
Directives and Inline Blocks
============================

Directives
----------

Oranj directives are special commands to the interpreter. There are no
fundamental differences between directives and other statements.

All directives take the form

#!name [arg, arg, arg, ...]

The following directives are implemented:

* clear
  Clears the screen. Particularly useful in the interactive console. PLEASE
  do not use as a method of clearing the screen within your program.

* drop
  Drop down to an oranj shell. This is useful to debug your scripts:

  if bad_thing {
      term << "Dropping down to shell. Why is bad_thing true?"
      #!drop
  }

* undrop
  End the dropped-down oranj shell and continue the external code that called  #!drop

* pydrop
  Drop down to a python shell. This is useful for deep debugging or, even more
  likely, debugging the interpreter itself.

* pyerror
  Print out the python stack trace of the last exception

* set
  Set a global interpreter option. Options:
    ec - set to on to enable context logging, off to disable

* debug
  Set up the debugger. You will begin to step through the code

* step
  If called without arguments, steps one statement forward through the code

  If called with arguments in or out will correspondingly move into or out of
  blocks and functions

  If called with argument end will stop debugging

* ec
  Logs its arguments to the error context. If argument begins with data, rest of
  arguments evaluated and added as a data message. For example

  #!ec Retrieving data from internet
  url_data = url_get("http://www.google.com")
  #!ec data url_data

* ecsave
  Save the error context in the variable name given as an argument.
  
* exit
  Exits the oranj program or shell.

Inline Blocks
-------------
Inline blocks in Oranj are a block of code that the interpreter does
not parse, but instead executes as a unit. This is most commonly used
to run commands in a different programming language.

All inline blocks take the form

#!name [arg, arg, arg, ...] {
text ...
#! }

Where the actual code is in the space labelled text. Lines of the form
"#!..." cannot be used within an inline block. The following block types
are implemented:

* python
  This block will execute the unit of code in a python interpreter. The
  code can make use of the Interpreter object, which can be retrieved from
  the global object curr. To interact with variable defined within oranj,
  use curr.curr as a dictionary. Make sure to call OrObject.from_py on any
  object that is exported to the running oranj code.